import{_ as s,c as a,o as e,ag as n}from"./chunks/framework.DBa8q30c.js";const g=JSON.parse('{"title":"API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),t={name:"api/index.md"};function l(r,i,h,p,o,k){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h1><p>The NuGet Config Parser library provides a comprehensive API for working with NuGet configuration files. This section documents all public interfaces, types, and methods.</p><h2 id="package-overview" tabindex="-1">Package Overview <a class="header-anchor" href="#package-overview" aria-label="Permalink to &quot;Package Overview&quot;">​</a></h2><p>The library is organized into several packages, each with a specific purpose:</p><table tabindex="0"><thead><tr><th>Package</th><th>Description</th></tr></thead><tbody><tr><td><a href="./core.html"><code>pkg/nuget</code></a></td><td>Main API package providing the primary interface</td></tr><tr><td><a href="./parser.html"><code>pkg/parser</code></a></td><td>Configuration file parsing functionality</td></tr><tr><td><a href="./editor.html"><code>pkg/editor</code></a></td><td>Position-aware configuration editing</td></tr><tr><td><a href="./finder.html"><code>pkg/finder</code></a></td><td>Configuration file discovery</td></tr><tr><td><a href="./manager.html"><code>pkg/manager</code></a></td><td>Configuration management operations</td></tr><tr><td><a href="./types.html"><code>pkg/types</code></a></td><td>Data type definitions</td></tr><tr><td><a href="./utils.html"><code>pkg/utils</code></a></td><td>Utility functions</td></tr><tr><td><a href="./errors.html"><code>pkg/errors</code></a></td><td>Error types and handling</td></tr><tr><td><a href="./constants.html"><code>pkg/constants</code></a></td><td>Constants and default values</td></tr></tbody></table><h2 id="quick-reference" tabindex="-1">Quick Reference <a class="header-anchor" href="#quick-reference" aria-label="Permalink to &quot;Quick Reference&quot;">​</a></h2><h3 id="core-api" tabindex="-1">Core API <a class="header-anchor" href="#core-api" aria-label="Permalink to &quot;Core API&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/scagogogo/nuget-config-parser/pkg/nuget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create API instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nuget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Parse configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFromFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/NuGet.Config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Find configuration files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configPath, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FindConfigFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modify configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddPackageSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Save configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SaveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/NuGet.Config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="position-aware-editing" tabindex="-1">Position-Aware Editing <a class="header-anchor" href="#position-aware-editing" aria-label="Permalink to &quot;Position-Aware Editing&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/scagogogo/nuget-config-parser/pkg/editor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Parse with position tracking</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parseResult, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFromFileWithPositions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/NuGet.Config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create editor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">editor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CreateConfigEditor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parseResult)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Make changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddPackageSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new-source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://new.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Apply changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modifiedContent, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplyEdits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="common-types" tabindex="-1">Common Types <a class="header-anchor" href="#common-types" aria-label="Permalink to &quot;Common Types&quot;">​</a></h2><h3 id="nugetconfig" tabindex="-1">NuGetConfig <a class="header-anchor" href="#nugetconfig" aria-label="Permalink to &quot;NuGetConfig&quot;">​</a></h3><p>The main configuration structure:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NuGetConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PackageSources             </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PackageSources</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             \`xml:&quot;packageSources&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PackageSourceCredentials   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PackageSourceCredentials</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`xml:&quot;packageSourceCredentials,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Config                     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    \`xml:&quot;config,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DisabledPackageSources     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisabledPackageSources</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`xml:&quot;disabledPackageSources,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ActivePackageSource        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ActivePackageSource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       \`xml:&quot;activePackageSource,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="packagesource" tabindex="-1">PackageSource <a class="header-anchor" href="#packagesource" aria-label="Permalink to &quot;PackageSource&quot;">​</a></h3><p>Represents a single package source:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PackageSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Key             </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`xml:&quot;key,attr&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Value           </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`xml:&quot;value,attr&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProtocolVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`xml:&quot;protocolVersion,attr,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><p>The library provides structured error handling:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/scagogogo/nuget-config-parser/pkg/errors</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFromFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;invalid.config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsNotFoundError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle file not found</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsParseError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle parsing error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsFormatError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle format error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="method-categories" tabindex="-1">Method Categories <a class="header-anchor" href="#method-categories" aria-label="Permalink to &quot;Method Categories&quot;">​</a></h2><h3 id="parsing-methods" tabindex="-1">Parsing Methods <a class="header-anchor" href="#parsing-methods" aria-label="Permalink to &quot;Parsing Methods&quot;">​</a></h3><ul><li><code>ParseFromFile(filePath string) (*types.NuGetConfig, error)</code></li><li><code>ParseFromString(content string) (*types.NuGetConfig, error)</code></li><li><code>ParseFromReader(reader io.Reader) (*types.NuGetConfig, error)</code></li><li><code>ParseFromFileWithPositions(filePath string) (*parser.ParseResult, error)</code></li></ul><h3 id="finding-methods" tabindex="-1">Finding Methods <a class="header-anchor" href="#finding-methods" aria-label="Permalink to &quot;Finding Methods&quot;">​</a></h3><ul><li><code>FindConfigFile() (string, error)</code></li><li><code>FindAllConfigFiles() []string</code></li><li><code>FindProjectConfig(startDir string) (string, error)</code></li><li><code>FindAndParseConfig() (*types.NuGetConfig, string, error)</code></li></ul><h3 id="package-source-methods" tabindex="-1">Package Source Methods <a class="header-anchor" href="#package-source-methods" aria-label="Permalink to &quot;Package Source Methods&quot;">​</a></h3><ul><li><code>AddPackageSource(config *types.NuGetConfig, key, value, protocolVersion string)</code></li><li><code>RemovePackageSource(config *types.NuGetConfig, key string) bool</code></li><li><code>GetPackageSource(config *types.NuGetConfig, key string) *types.PackageSource</code></li><li><code>GetAllPackageSources(config *types.NuGetConfig) []types.PackageSource</code></li><li><code>EnablePackageSource(config *types.NuGetConfig, key string)</code></li><li><code>DisablePackageSource(config *types.NuGetConfig, key string)</code></li><li><code>IsPackageSourceDisabled(config *types.NuGetConfig, key string) bool</code></li></ul><h3 id="credential-methods" tabindex="-1">Credential Methods <a class="header-anchor" href="#credential-methods" aria-label="Permalink to &quot;Credential Methods&quot;">​</a></h3><ul><li><code>AddCredential(config *types.NuGetConfig, sourceKey, username, password string)</code></li><li><code>RemoveCredential(config *types.NuGetConfig, sourceKey string) bool</code></li><li><code>GetCredential(config *types.NuGetConfig, sourceKey string) *types.SourceCredential</code></li></ul><h3 id="configuration-methods" tabindex="-1">Configuration Methods <a class="header-anchor" href="#configuration-methods" aria-label="Permalink to &quot;Configuration Methods&quot;">​</a></h3><ul><li><code>AddConfigOption(config *types.NuGetConfig, key, value string)</code></li><li><code>RemoveConfigOption(config *types.NuGetConfig, key string) bool</code></li><li><code>GetConfigOption(config *types.NuGetConfig, key string) string</code></li><li><code>SetActivePackageSource(config *types.NuGetConfig, key, value string)</code></li><li><code>GetActivePackageSource(config *types.NuGetConfig) *types.PackageSource</code></li></ul><h3 id="serialization-methods" tabindex="-1">Serialization Methods <a class="header-anchor" href="#serialization-methods" aria-label="Permalink to &quot;Serialization Methods&quot;">​</a></h3><ul><li><code>SaveConfig(config *types.NuGetConfig, filePath string) error</code></li><li><code>SerializeToXML(config *types.NuGetConfig) (string, error)</code></li><li><code>CreateDefaultConfig() *types.NuGetConfig</code></li><li><code>InitializeDefaultConfig(filePath string) error</code></li></ul><h3 id="editor-methods" tabindex="-1">Editor Methods <a class="header-anchor" href="#editor-methods" aria-label="Permalink to &quot;Editor Methods&quot;">​</a></h3><ul><li><code>CreateConfigEditor(parseResult *parser.ParseResult) *editor.ConfigEditor</code></li><li><code>AddPackageSource(key, value, protocolVersion string) error</code></li><li><code>RemovePackageSource(sourceKey string) error</code></li><li><code>UpdatePackageSourceURL(sourceKey, newURL string) error</code></li><li><code>UpdatePackageSourceVersion(sourceKey, newVersion string) error</code></li><li><code>ApplyEdits() ([]byte, error)</code></li></ul><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="error-handling-1" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling-1" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h3><p>Always check for errors and handle them appropriately:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFromFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configPath)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsNotFoundError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create default configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CreateDefaultConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Errorf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;failed to parse config: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="resource-management" tabindex="-1">Resource Management <a class="header-anchor" href="#resource-management" aria-label="Permalink to &quot;Resource Management&quot;">​</a></h3><p>The library doesn&#39;t require explicit resource cleanup, but be mindful of file operations:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Good: Use the API methods</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SaveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, configPath)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Avoid: Manual file operations when API methods are available</span></span></code></pre></div><h3 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-label="Permalink to &quot;Performance&quot;">​</a></h3><ul><li>Reuse API instances when possible</li><li>Cache parsed configurations for repeated access</li><li>Use position-aware editing for minimal file changes</li></ul><h2 id="thread-safety" tabindex="-1">Thread Safety <a class="header-anchor" href="#thread-safety" aria-label="Permalink to &quot;Thread Safety&quot;">​</a></h2><p>The library is not thread-safe by design. If you need to use it in concurrent scenarios:</p><ul><li>Create separate API instances for each goroutine</li><li>Use appropriate synchronization mechanisms</li><li>Avoid sharing configuration objects between goroutines without proper locking</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Explore the detailed documentation for each package:</p><ul><li><a href="./core.html">Core API</a> - Main API interface</li><li><a href="./parser.html">Parser</a> - Configuration parsing</li><li><a href="./editor.html">Editor</a> - Position-aware editing</li><li><a href="./types.html">Types</a> - Data structures</li><li><a href="/nuget-config-parser/examples/">Examples</a> - Usage examples</li></ul>`,50)]))}const c=s(t,[["render",l]]);export{g as __pageData,c as default};
