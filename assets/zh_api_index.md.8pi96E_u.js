import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.DBa8q30c.js";const g=JSON.parse('{"title":"API 参考","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api/index.md","filePath":"zh/api/index.md"}'),t={name:"zh/api/index.md"};function l(h,s,p,k,r,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="api-参考" tabindex="-1">API 参考 <a class="header-anchor" href="#api-参考" aria-label="Permalink to &quot;API 参考&quot;">​</a></h1><p>NuGet Config Parser 库提供了用于处理 NuGet 配置文件的全面 API。本节记录了所有公开接口、类型和方法。</p><h2 id="包概述" tabindex="-1">包概述 <a class="header-anchor" href="#包概述" aria-label="Permalink to &quot;包概述&quot;">​</a></h2><p>该库分为几个包，每个包都有特定的用途：</p><table tabindex="0"><thead><tr><th>包</th><th>描述</th></tr></thead><tbody><tr><td><a href="./core.html"><code>pkg/nuget</code></a></td><td>提供主要接口的核心 API 包</td></tr><tr><td><a href="./parser.html"><code>pkg/parser</code></a></td><td>配置文件解析功能</td></tr><tr><td><a href="./editor.html"><code>pkg/editor</code></a></td><td>位置感知配置编辑</td></tr><tr><td><a href="./finder.html"><code>pkg/finder</code></a></td><td>配置文件发现</td></tr><tr><td><a href="./manager.html"><code>pkg/manager</code></a></td><td>配置管理操作</td></tr><tr><td><a href="./types.html"><code>pkg/types</code></a></td><td>数据类型定义</td></tr><tr><td><a href="./utils.html"><code>pkg/utils</code></a></td><td>工具函数</td></tr><tr><td><a href="./errors.html"><code>pkg/errors</code></a></td><td>错误类型和处理</td></tr><tr><td><a href="./constants.html"><code>pkg/constants</code></a></td><td>常量和默认值</td></tr></tbody></table><h2 id="快速参考" tabindex="-1">快速参考 <a class="header-anchor" href="#快速参考" aria-label="Permalink to &quot;快速参考&quot;">​</a></h2><h3 id="核心-api" tabindex="-1">核心 API <a class="header-anchor" href="#核心-api" aria-label="Permalink to &quot;核心 API&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/scagogogo/nuget-config-parser/pkg/nuget</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 API 实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nuget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFromFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/NuGet.Config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configPath, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FindConfigFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddPackageSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 保存配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SaveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/NuGet.Config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="位置感知编辑" tabindex="-1">位置感知编辑 <a class="header-anchor" href="#位置感知编辑" aria-label="Permalink to &quot;位置感知编辑&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/scagogogo/nuget-config-parser/pkg/editor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用位置跟踪解析</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parseResult, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFromFileWithPositions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/NuGet.Config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建编辑器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">editor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CreateConfigEditor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parseResult)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 进行更改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddPackageSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new-source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://new.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用更改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modifiedContent, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplyEdits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="常用类型" tabindex="-1">常用类型 <a class="header-anchor" href="#常用类型" aria-label="Permalink to &quot;常用类型&quot;">​</a></h2><h3 id="nugetconfig" tabindex="-1">NuGetConfig <a class="header-anchor" href="#nugetconfig" aria-label="Permalink to &quot;NuGetConfig&quot;">​</a></h3><p>主要配置结构：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NuGetConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PackageSources             </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PackageSources</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             \`xml:&quot;packageSources&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PackageSourceCredentials   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PackageSourceCredentials</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  \`xml:&quot;packageSourceCredentials,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Config                     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    \`xml:&quot;config,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DisabledPackageSources     </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisabledPackageSources</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    \`xml:&quot;disabledPackageSources,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ActivePackageSource        </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ActivePackageSource</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       \`xml:&quot;activePackageSource,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="packagesource" tabindex="-1">PackageSource <a class="header-anchor" href="#packagesource" aria-label="Permalink to &quot;PackageSource&quot;">​</a></h3><p>表示单个包源：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PackageSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Key             </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`xml:&quot;key,attr&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Value           </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`xml:&quot;value,attr&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProtocolVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`xml:&quot;protocolVersion,attr,omitempty&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><p>该库提供结构化的错误处理：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">github.com/scagogogo/nuget-config-parser/pkg/errors</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFromFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;invalid.config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsNotFoundError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理文件未找到</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsParseError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理解析错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsFormatError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理格式错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="方法分类" tabindex="-1">方法分类 <a class="header-anchor" href="#方法分类" aria-label="Permalink to &quot;方法分类&quot;">​</a></h2><h3 id="解析方法" tabindex="-1">解析方法 <a class="header-anchor" href="#解析方法" aria-label="Permalink to &quot;解析方法&quot;">​</a></h3><ul><li><code>ParseFromFile(filePath string) (*types.NuGetConfig, error)</code></li><li><code>ParseFromString(content string) (*types.NuGetConfig, error)</code></li><li><code>ParseFromReader(reader io.Reader) (*types.NuGetConfig, error)</code></li><li><code>ParseFromFileWithPositions(filePath string) (*parser.ParseResult, error)</code></li></ul><h3 id="查找方法" tabindex="-1">查找方法 <a class="header-anchor" href="#查找方法" aria-label="Permalink to &quot;查找方法&quot;">​</a></h3><ul><li><code>FindConfigFile() (string, error)</code></li><li><code>FindAllConfigFiles() []string</code></li><li><code>FindProjectConfig(startDir string) (string, error)</code></li><li><code>FindAndParseConfig() (*types.NuGetConfig, string, error)</code></li></ul><h3 id="包源方法" tabindex="-1">包源方法 <a class="header-anchor" href="#包源方法" aria-label="Permalink to &quot;包源方法&quot;">​</a></h3><ul><li><code>AddPackageSource(config *types.NuGetConfig, key, value, protocolVersion string)</code></li><li><code>RemovePackageSource(config *types.NuGetConfig, key string) bool</code></li><li><code>GetPackageSource(config *types.NuGetConfig, key string) *types.PackageSource</code></li><li><code>GetAllPackageSources(config *types.NuGetConfig) []types.PackageSource</code></li><li><code>EnablePackageSource(config *types.NuGetConfig, key string)</code></li><li><code>DisablePackageSource(config *types.NuGetConfig, key string)</code></li><li><code>IsPackageSourceDisabled(config *types.NuGetConfig, key string) bool</code></li></ul><h3 id="凭证方法" tabindex="-1">凭证方法 <a class="header-anchor" href="#凭证方法" aria-label="Permalink to &quot;凭证方法&quot;">​</a></h3><ul><li><code>AddCredential(config *types.NuGetConfig, sourceKey, username, password string)</code></li><li><code>RemoveCredential(config *types.NuGetConfig, sourceKey string) bool</code></li><li><code>GetCredential(config *types.NuGetConfig, sourceKey string) *types.SourceCredential</code></li></ul><h3 id="配置方法" tabindex="-1">配置方法 <a class="header-anchor" href="#配置方法" aria-label="Permalink to &quot;配置方法&quot;">​</a></h3><ul><li><code>AddConfigOption(config *types.NuGetConfig, key, value string)</code></li><li><code>RemoveConfigOption(config *types.NuGetConfig, key string) bool</code></li><li><code>GetConfigOption(config *types.NuGetConfig, key string) string</code></li><li><code>SetActivePackageSource(config *types.NuGetConfig, key, value string)</code></li><li><code>GetActivePackageSource(config *types.NuGetConfig) *types.PackageSource</code></li></ul><h3 id="序列化方法" tabindex="-1">序列化方法 <a class="header-anchor" href="#序列化方法" aria-label="Permalink to &quot;序列化方法&quot;">​</a></h3><ul><li><code>SaveConfig(config *types.NuGetConfig, filePath string) error</code></li><li><code>SerializeToXML(config *types.NuGetConfig) (string, error)</code></li><li><code>CreateDefaultConfig() *types.NuGetConfig</code></li><li><code>InitializeDefaultConfig(filePath string) error</code></li></ul><h3 id="编辑器方法" tabindex="-1">编辑器方法 <a class="header-anchor" href="#编辑器方法" aria-label="Permalink to &quot;编辑器方法&quot;">​</a></h3><ul><li><code>CreateConfigEditor(parseResult *parser.ParseResult) *editor.ConfigEditor</code></li><li><code>AddPackageSource(key, value, protocolVersion string) error</code></li><li><code>RemovePackageSource(sourceKey string) error</code></li><li><code>UpdatePackageSourceURL(sourceKey, newURL string) error</code></li><li><code>UpdatePackageSourceVersion(sourceKey, newVersion string) error</code></li><li><code>ApplyEdits() ([]byte, error)</code></li></ul><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><h3 id="错误处理-1" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理-1" aria-label="Permalink to &quot;错误处理&quot;">​</a></h3><p>始终检查错误并适当处理：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseFromFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configPath)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsNotFoundError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建默认配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CreateDefaultConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Errorf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;解析配置失败: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="资源管理" tabindex="-1">资源管理 <a class="header-anchor" href="#资源管理" aria-label="Permalink to &quot;资源管理&quot;">​</a></h3><p>该库不需要显式的资源清理，但要注意文件操作：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 好的做法：使用 API 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SaveConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config, configPath)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 避免：当有 API 方法可用时进行手动文件操作</span></span></code></pre></div><h3 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h3><ul><li>尽可能重用 API 实例</li><li>缓存解析的配置以供重复访问</li><li>使用位置感知编辑以最小化文件更改</li></ul><h2 id="线程安全" tabindex="-1">线程安全 <a class="header-anchor" href="#线程安全" aria-label="Permalink to &quot;线程安全&quot;">​</a></h2><p>该库在设计上不是线程安全的。如果需要在并发场景中使用：</p><ul><li>为每个 goroutine 创建单独的 API 实例</li><li>使用适当的同步机制</li><li>避免在没有适当锁定的情况下在 goroutine 之间共享配置对象</li></ul><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>探索每个包的详细文档：</p><ul><li><a href="./core.html">核心 API</a> - 主要 API 接口</li><li><a href="./parser.html">解析器</a> - 配置解析</li><li><a href="./editor.html">编辑器</a> - 位置感知编辑</li><li><a href="./types.html">类型</a> - 数据结构</li><li><a href="/nuget-config-parser/zh/examples/">示例</a> - 使用示例</li></ul>`,50)]))}const c=i(t,[["render",l]]);export{g as __pageData,c as default};
